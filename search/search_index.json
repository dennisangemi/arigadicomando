{"config":{"indexing":"full","lang":["it"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"a riga di comando \u00b6 La riga di comando (la CLI ) ha reso facile e comode tante delle cose che faccio con il PC. Allora ho voluto dedicargli uno spazio, sia per farne conoscere i pregi a chi ancora li ignora o sfrutta poco, sia per mettere a fattor comune alcuni dei miei appunti . \u00c8 un argomento molto ampio, che qui verr\u00e0 esploso sopratutto su due filoni principali: i suoi strumenti per leggere , trasformare e analizzare file di testo strutturati ; le cose che mi piacciono , che mi sembrano \"geniali\", irrinunciabili, buffe, \" mai pi\u00f9 senza \", ecc.. \u00c8 dedicato sopratutto al suo utilizzo nel mondo Linux ed \u00e8 quindi per tutti .","title":"Home"},{"location":"#a-riga-di-comando","text":"La riga di comando (la CLI ) ha reso facile e comode tante delle cose che faccio con il PC. Allora ho voluto dedicargli uno spazio, sia per farne conoscere i pregi a chi ancora li ignora o sfrutta poco, sia per mettere a fattor comune alcuni dei miei appunti . \u00c8 un argomento molto ampio, che qui verr\u00e0 esploso sopratutto su due filoni principali: i suoi strumenti per leggere , trasformare e analizzare file di testo strutturati ; le cose che mi piacciono , che mi sembrano \"geniali\", irrinunciabili, buffe, \" mai pi\u00f9 senza \", ecc.. \u00c8 dedicato sopratutto al suo utilizzo nel mondo Linux ed \u00e8 quindi per tutti .","title":"a riga di comando"},{"location":"cli/","text":"La CLI \u00b6 La riga di comando - in inglese CLI , la Command Line Intereface - \u00e8 un'interfaccia di dialogo testuale tra utente e computer , ed anche un programma, che interpreta i comandi inseriti da tastiera e li esegue. Esistono decine di interfacce a riga di comando, per tutti i sistemi operativi. Qui si far\u00e0 riferimento a una generica CLI in un sistema operativo Linux. \u00c8 possibile attivarla in tutti i sistemi operativi: Linux (ovviamente), Mac OS (che \u00e8 basato su un sistema operativo Unix), Windows (il modo consigliato per Win \u00e8 Windows Subsystem for Linux ), ChromeOS, ecc..","title":"La CLI"},{"location":"cli/#la-cli","text":"La riga di comando - in inglese CLI , la Command Line Intereface - \u00e8 un'interfaccia di dialogo testuale tra utente e computer , ed anche un programma, che interpreta i comandi inseriti da tastiera e li esegue. Esistono decine di interfacce a riga di comando, per tutti i sistemi operativi. Qui si far\u00e0 riferimento a una generica CLI in un sistema operativo Linux. \u00c8 possibile attivarla in tutti i sistemi operativi: Linux (ovviamente), Mac OS (che \u00e8 basato su un sistema operativo Unix), Windows (il modo consigliato per Win \u00e8 Windows Subsystem for Linux ), ChromeOS, ecc..","title":"La CLI"},{"location":"grazie/","text":"Grazie \u00b6 Gabriele John GDAL/OGR Jeroen Janssens","title":"Grazie"},{"location":"grazie/#grazie","text":"Gabriele John GDAL/OGR Jeroen Janssens","title":"Grazie"},{"location":"letture/","text":"Letture consigliate \u00b6 Queste letture per me sono state fondamentali. Quella da cui sono partito alcuni anni fa \u00e8 la prima versione del volume di Jeroen Janssens (che ringrazio molto). Janssens, Jeroen . Data Science at the Command Line, 2e. https://www.datascienceatthecommandline.com/2e/ Vince, Buffalo . Bioinformatics Data Skills. https://www.oreilly.com/library/view/bioinformatics-data-skills/9781449367480/ William, Shotts . The Linux Command Line. https://linuxcommand.org/tlcl.php","title":"Letture"},{"location":"letture/#letture-consigliate","text":"Queste letture per me sono state fondamentali. Quella da cui sono partito alcuni anni fa \u00e8 la prima versione del volume di Jeroen Janssens (che ringrazio molto). Janssens, Jeroen . Data Science at the Command Line, 2e. https://www.datascienceatthecommandline.com/2e/ Vince, Buffalo . Bioinformatics Data Skills. https://www.oreilly.com/library/view/bioinformatics-data-skills/9781449367480/ William, Shotts . The Linux Command Line. https://linuxcommand.org/tlcl.php","title":"Letture consigliate"},{"location":"monografie/","text":"Monografie \u00b6 In questa sezione delle guide dedicate ad alcuni strumenti per la lettura , trasformazione e analisi di file di testo strutturati , molto consigliati: Miller ; VisiData .","title":"Introduzione"},{"location":"monografie/#monografie","text":"In questa sezione delle guide dedicate ad alcuni strumenti per la lettura , trasformazione e analisi di file di testo strutturati , molto consigliati: Miller ; VisiData .","title":"Monografie"},{"location":"partecipa/","text":"Partecipa \u00b6 Se ti piace a riga di comando e vuoi dare una mano, puoi farlo in queste modalit\u00e0: segnalare qualcosa da correggere; proporre una nuovo paragrafo, pagina, sezione, ecc.. Lo spazio per farlo sono le discussioni su GitHub .","title":"Partecipa"},{"location":"partecipa/#partecipa","text":"Se ti piace a riga di comando e vuoi dare una mano, puoi farlo in queste modalit\u00e0: segnalare qualcosa da correggere; proporre una nuovo paragrafo, pagina, sezione, ecc.. Lo spazio per farlo sono le discussioni su GitHub .","title":"Partecipa"},{"location":"dati/","text":"","title":"Introduzione"},{"location":"dati/converti/","text":"Converti \u00b6","title":"Converti"},{"location":"dati/converti/#converti","text":"","title":"Converti"},{"location":"dati/esplora/","text":"Esplora \u00b6 In questo spazio facciamo riferimento a dati che sono archiviati come testo. \u00c8 la modalit\u00e0 in cui molto spesso sono archiviati file di dati (JSON, XML, CSV, TTL, YAML, ecc.) e per i quali gli strumenti a riga di comando hanno supporto nativo, perch\u00e9 si aspettano stringhe di testo come input . Tanti strumenti di base e nativi della riga di comando sono impareggiabili nell'esplorare file di testo, in termini di rapidit\u00e0, opzioni e modalit\u00e0 per farlo. Sono sicuramente pi\u00f9 adatti della gran parte di quelli con interfaccia grafica. Encoding \u00b6 Le misure \u00b6 Visualizzare \u00b6 L' utility tipica \u00e8 cat che \"stampa\" uno o pi\u00f9 file (in questo caso concatena e stampa).","title":"Esplora"},{"location":"dati/esplora/#esplora","text":"In questo spazio facciamo riferimento a dati che sono archiviati come testo. \u00c8 la modalit\u00e0 in cui molto spesso sono archiviati file di dati (JSON, XML, CSV, TTL, YAML, ecc.) e per i quali gli strumenti a riga di comando hanno supporto nativo, perch\u00e9 si aspettano stringhe di testo come input . Tanti strumenti di base e nativi della riga di comando sono impareggiabili nell'esplorare file di testo, in termini di rapidit\u00e0, opzioni e modalit\u00e0 per farlo. Sono sicuramente pi\u00f9 adatti della gran parte di quelli con interfaccia grafica.","title":"Esplora"},{"location":"dati/esplora/#encoding","text":"","title":"Encoding"},{"location":"dati/esplora/#le-misure","text":"","title":"Le misure"},{"location":"dati/esplora/#visualizzare","text":"L' utility tipica \u00e8 cat che \"stampa\" uno o pi\u00f9 file (in questo caso concatena e stampa).","title":"Visualizzare"},{"location":"dati/trasforma/","text":"Trasforma \u00b6 Da wide a long \u00b6 Da long a wide \u00b6","title":"Trasforma"},{"location":"dati/trasforma/#trasforma","text":"","title":"Trasforma"},{"location":"dati/trasforma/#da-wide-a-long","text":"","title":"Da wide a long"},{"location":"dati/trasforma/#da-long-a-wide","text":"","title":"Da long a wide"},{"location":"maipiusenza/","text":"ciao mondo \u00b6","title":"ciao mondo"},{"location":"maipiusenza/#ciao-mondo","text":"","title":"ciao mondo"},{"location":"miller/","text":"Miller \u00b6 Il suo eccezionale autore - John Kerl - definisce Miller come awk , sed , cut , join e sort per dati indicizzati con nome, come CSV , TSV e JSON . Ha una fantastica documentazione ufficiale in inglese, consultabile qui . Primi passi \u00b6 Miller fa spesso riferimento nei suoi sub comandi al toolkit di UNIX e ai suoi esegubili come cat , tail , cut , sort , etc.. Questo \u00e8 ad esempio un comando di base, che stampa a schermo il contenuto di un file : mlr --csv cat base.csv Esistono altri tipi di sub comandi, che invece replicano alcune delle caratteristiche di awk , come filter e put . I sub comandi di Miller si chiamano verbi , formati ; verbi ; script ( DSL )","title":"Introduzione"},{"location":"miller/#miller","text":"Il suo eccezionale autore - John Kerl - definisce Miller come awk , sed , cut , join e sort per dati indicizzati con nome, come CSV , TSV e JSON . Ha una fantastica documentazione ufficiale in inglese, consultabile qui .","title":"Miller"},{"location":"miller/#primi-passi","text":"Miller fa spesso riferimento nei suoi sub comandi al toolkit di UNIX e ai suoi esegubili come cat , tail , cut , sort , etc.. Questo \u00e8 ad esempio un comando di base, che stampa a schermo il contenuto di un file : mlr --csv cat base.csv Esistono altri tipi di sub comandi, che invece replicano alcune delle caratteristiche di awk , come filter e put . I sub comandi di Miller si chiamano verbi , formati ; verbi ; script ( DSL )","title":"Primi passi"},{"location":"miller/dsl/","text":"","title":"DSL"},{"location":"miller/formati/","text":"Formati \u00b6 Miller legge e scrive diversi formati di testo strutturato. Formato nativo (DKVP) \u00b6 Il formato nativo \u00e8 fatto a coppie chiave-valore. Ad esempio il file base sottostante: nome=andy,dataNascita=1973-05-08,altezza=176,peso=86.5 nome=chiara,dataNascita=1993-12-13,altezza=162,peso=58.3 nome=guido,dataNascita=2001-01-22,altezza=196,peso=90.4 A seguire, lo stesso input in altri dei formati supportati da Miller. CSV \u00b6 nome,dataNascita,altezza,peso andy,1973-05-08,176,86.5 chiara,1993-12-13,162,58.3 guido,2001-01-22,196,90.4 TSV \u00b6 nome dataNascita altezza peso andy 1973-05-08 176 86.5 chiara 1993-12-13 162 58.3 guido 2001-01-22 196 90.4 NIDX: Index-numbered \u00b6 andy 1973-05-08 176 86.5 chiara 1993-12-13 162 58.3 guido 2001-01-22 196 90.4 JSON (tabulare) \u00b6 { \"nome\" : \"andy\" , \"dataNascita\" : \"1973-05-08\" , \"altezza\" : 176 , \"peso\" : 86.5 } { \"nome\" : \"chiara\" , \"dataNascita\" : \"1993-12-13\" , \"altezza\" : 162 , \"peso\" : 58.3 } { \"nome\" : \"guido\" , \"dataNascita\" : \"2001-01-22\" , \"altezza\" : 196 , \"peso\" : 90.4 } PPRINT: Pretty-printed tabular \u00b6 +--------+-------------+---------+------+ | nome | dataNascita | altezza | peso | +--------+-------------+---------+------+ | andy | 1973-05-08 | 176 | 86.5 | | chiara | 1993-12-13 | 162 | 58.3 | | guido | 2001-01-22 | 196 | 90.4 | +--------+-------------+---------+------+ XTAB: Vertical tabular \u00b6 nome andy dataNascita 1973-05-08 altezza 176 peso 86.5 nome chiara dataNascita 1993-12-13 altezza 162 peso 58.3 nome guido dataNascita 2001-01-22 altezza 196 peso 90.4 Markdown \u00b6 | nome | dataNascita | altezza | peso | | --- | --- | --- | --- | | andy | 1973-05-08 | 176 | 86.5 | | chiara | 1993-12-13 | 162 | 58.3 | | guido | 2001-01-22 | 196 | 90.4 | Conversione di formato \u00b6 A seguire un esempio di conversione da CSV a Markdown . mlr --icsv --omd cat base.csv >output.md Con --icsv si imposta come formato di i nput il csv , mendre con --omd il formato di o utput in md ( Markdown ). Se si volesse come output un file JSON basterebbe modificare il comando di sopra in: mlr --icsv --ojson cat base.csv >output.json Lo stesso criterio per gli altri formati. C'\u00e8 anche una versione breve, che unisce tutto in un solo parametro. Ad esempio per la conversione da CSV a Markdown sar\u00e0: mlr --c2m cat base.csv >output.md Il parametro --c2m sta per CSV TO MARKDOWN . In analogia, per il passaggio da CSV a JSON sar\u00e0 --c2j .","title":"Formati"},{"location":"miller/formati/#formati","text":"Miller legge e scrive diversi formati di testo strutturato.","title":"Formati"},{"location":"miller/formati/#formato-nativo-dkvp","text":"Il formato nativo \u00e8 fatto a coppie chiave-valore. Ad esempio il file base sottostante: nome=andy,dataNascita=1973-05-08,altezza=176,peso=86.5 nome=chiara,dataNascita=1993-12-13,altezza=162,peso=58.3 nome=guido,dataNascita=2001-01-22,altezza=196,peso=90.4 A seguire, lo stesso input in altri dei formati supportati da Miller.","title":"Formato nativo (DKVP)"},{"location":"miller/formati/#csv","text":"nome,dataNascita,altezza,peso andy,1973-05-08,176,86.5 chiara,1993-12-13,162,58.3 guido,2001-01-22,196,90.4","title":"CSV"},{"location":"miller/formati/#tsv","text":"nome dataNascita altezza peso andy 1973-05-08 176 86.5 chiara 1993-12-13 162 58.3 guido 2001-01-22 196 90.4","title":"TSV"},{"location":"miller/formati/#nidx-index-numbered","text":"andy 1973-05-08 176 86.5 chiara 1993-12-13 162 58.3 guido 2001-01-22 196 90.4","title":"NIDX: Index-numbered"},{"location":"miller/formati/#json-tabulare","text":"{ \"nome\" : \"andy\" , \"dataNascita\" : \"1973-05-08\" , \"altezza\" : 176 , \"peso\" : 86.5 } { \"nome\" : \"chiara\" , \"dataNascita\" : \"1993-12-13\" , \"altezza\" : 162 , \"peso\" : 58.3 } { \"nome\" : \"guido\" , \"dataNascita\" : \"2001-01-22\" , \"altezza\" : 196 , \"peso\" : 90.4 }","title":"JSON (tabulare)"},{"location":"miller/formati/#pprint-pretty-printed-tabular","text":"+--------+-------------+---------+------+ | nome | dataNascita | altezza | peso | +--------+-------------+---------+------+ | andy | 1973-05-08 | 176 | 86.5 | | chiara | 1993-12-13 | 162 | 58.3 | | guido | 2001-01-22 | 196 | 90.4 | +--------+-------------+---------+------+","title":"PPRINT: Pretty-printed tabular"},{"location":"miller/formati/#xtab-vertical-tabular","text":"nome andy dataNascita 1973-05-08 altezza 176 peso 86.5 nome chiara dataNascita 1993-12-13 altezza 162 peso 58.3 nome guido dataNascita 2001-01-22 altezza 196 peso 90.4","title":"XTAB: Vertical tabular"},{"location":"miller/formati/#markdown","text":"| nome | dataNascita | altezza | peso | | --- | --- | --- | --- | | andy | 1973-05-08 | 176 | 86.5 | | chiara | 1993-12-13 | 162 | 58.3 | | guido | 2001-01-22 | 196 | 90.4 |","title":"Markdown"},{"location":"miller/formati/#conversione-di-formato","text":"A seguire un esempio di conversione da CSV a Markdown . mlr --icsv --omd cat base.csv >output.md Con --icsv si imposta come formato di i nput il csv , mendre con --omd il formato di o utput in md ( Markdown ). Se si volesse come output un file JSON basterebbe modificare il comando di sopra in: mlr --icsv --ojson cat base.csv >output.json Lo stesso criterio per gli altri formati. C'\u00e8 anche una versione breve, che unisce tutto in un solo parametro. Ad esempio per la conversione da CSV a Markdown sar\u00e0: mlr --c2m cat base.csv >output.md Il parametro --c2m sta per CSV TO MARKDOWN . In analogia, per il passaggio da CSV a JSON sar\u00e0 --c2j .","title":"Conversione di formato"},{"location":"miller/ricette/","text":"Ricette \u00b6 Trova e sostituisci globale \u00b6","title":"Ricette"},{"location":"miller/ricette/#ricette","text":"","title":"Ricette"},{"location":"miller/ricette/#trova-e-sostituisci-globale","text":"","title":"Trova e sostituisci globale"},{"location":"miller/verbi/","text":"Verbi \u00b6 I verbi sono i sub comandi di Miller. File per sviluppare esempi Per la gran parte degli esempi sviluppati in questa pagina, verr\u00e0 usato il file base.csv (vedi sotto). \u00c8 stato scelto un file piccolo e semplice, per ragioni didattiche e di leggibilit\u00e0. nome dataNascita altezza peso andy 1973-05-08 176 86.5 chiara 1993-12-13 162 58.3 guido 2001-01-22 196 90.4 Guida in linea per un verbo \u00b6 Per aprire la guida in linea di un verbo, basta lanciare mlr nomeVerbo -h . Ad esempio per il verbo cat, il comando mlr cat -h restituir\u00e0 Usage: mlr cat [options] Passes input records directly to output. Most useful for format conversion. Options: -n Prepend field \"n\" to each record with record-counter starting at 1 -g {comma-separated field name(s)} When used with -n/-N, writes record-counters keyed by specified field name(s). -v Write a low-level record-structure dump to stderr. -N {name} Prepend field {name} to each record with record-counter starting at 1 Lista \u00b6 L'elenco completo dei verbi di Miller \u00e8 nella guida ufficiale . cat \u00b6 Utile sopratutto per conversiono di formato (vedi formati ) e per concatenare file con lo stesso schema. Usage: mlr cat [options] Passes input records directly to output. Most useful for format conversion. Options: -n Prepend field \"n\" to each record with record-counter starting at 1 -g {comma-separated field name(s)} When used with -n/-N, writes record-counters keyed by specified field name(s). -v Write a low-level record-structure dump to stderr. -N {name} Prepend field {name} to each record with record-counter starting at 1 Stampa sulla shell il contenuto \u00b6 mlr --csv cat base.csv nome,dataNascita,altezza,peso andy,1973-05-08,176,86.5 chiara,1993-12-13,162,58.3 guido,2001-01-22,196,90.4 reshape \u00b6 Trasforma lo schema da wide a long e viceversa. Vedi approfondimento . Wide-to-long options: -i {input field names} -o {key-field name,value-field name} -r {input field regexes} -o {key-field name,value-field name} These pivot/reshape the input data such that the input fields are removed and separate records are emitted for each key/value pair. Note: this works with tail -f and produces output records for each input record seen. Long-to-wide options: -s {key-field name,value-field name} These pivot/reshape the input data to undo the wide-to-long operation. Note: this does not work with tail -f; it produces output records only after all input records have been read. Ad esempio da wide Studente Scuola Matematica Italiano Andy Liceo Cannizzaro 7 6 Lisa Liceo Garibaldi 6 7 Giovanna Liceo Garibaldi 7 7 a long Studente Scuola materia voto Andy Liceo Cannizzaro Matematica 7 Andy Liceo Cannizzaro Italiano 6 Lisa Liceo Garibaldi Matematica 6 Lisa Liceo Garibaldi Italiano 7 Giovanna Liceo Garibaldi Matematica 7 Giovanna Liceo Garibaldi Italiano 7","title":"Verbi"},{"location":"miller/verbi/#verbi","text":"I verbi sono i sub comandi di Miller. File per sviluppare esempi Per la gran parte degli esempi sviluppati in questa pagina, verr\u00e0 usato il file base.csv (vedi sotto). \u00c8 stato scelto un file piccolo e semplice, per ragioni didattiche e di leggibilit\u00e0. nome dataNascita altezza peso andy 1973-05-08 176 86.5 chiara 1993-12-13 162 58.3 guido 2001-01-22 196 90.4","title":"Verbi"},{"location":"miller/verbi/#guida-in-linea-per-un-verbo","text":"Per aprire la guida in linea di un verbo, basta lanciare mlr nomeVerbo -h . Ad esempio per il verbo cat, il comando mlr cat -h restituir\u00e0 Usage: mlr cat [options] Passes input records directly to output. Most useful for format conversion. Options: -n Prepend field \"n\" to each record with record-counter starting at 1 -g {comma-separated field name(s)} When used with -n/-N, writes record-counters keyed by specified field name(s). -v Write a low-level record-structure dump to stderr. -N {name} Prepend field {name} to each record with record-counter starting at 1","title":"Guida in linea per un verbo"},{"location":"miller/verbi/#lista","text":"L'elenco completo dei verbi di Miller \u00e8 nella guida ufficiale .","title":"Lista"},{"location":"miller/verbi/#cat","text":"Utile sopratutto per conversiono di formato (vedi formati ) e per concatenare file con lo stesso schema. Usage: mlr cat [options] Passes input records directly to output. Most useful for format conversion. Options: -n Prepend field \"n\" to each record with record-counter starting at 1 -g {comma-separated field name(s)} When used with -n/-N, writes record-counters keyed by specified field name(s). -v Write a low-level record-structure dump to stderr. -N {name} Prepend field {name} to each record with record-counter starting at 1","title":"cat"},{"location":"miller/verbi/#reshape","text":"Trasforma lo schema da wide a long e viceversa. Vedi approfondimento . Wide-to-long options: -i {input field names} -o {key-field name,value-field name} -r {input field regexes} -o {key-field name,value-field name} These pivot/reshape the input data such that the input fields are removed and separate records are emitted for each key/value pair. Note: this works with tail -f and produces output records for each input record seen. Long-to-wide options: -s {key-field name,value-field name} These pivot/reshape the input data to undo the wide-to-long operation. Note: this does not work with tail -f; it produces output records only after all input records have been read. Ad esempio da wide Studente Scuola Matematica Italiano Andy Liceo Cannizzaro 7 6 Lisa Liceo Garibaldi 6 7 Giovanna Liceo Garibaldi 7 7 a long Studente Scuola materia voto Andy Liceo Cannizzaro Matematica 7 Andy Liceo Cannizzaro Italiano 6 Lisa Liceo Garibaldi Matematica 6 Lisa Liceo Garibaldi Italiano 7 Giovanna Liceo Garibaldi Matematica 7 Giovanna Liceo Garibaldi Italiano 7","title":"reshape"},{"location":"scrapecli/","text":"","title":"Index"},{"location":"shell/","text":"","title":"Index"},{"location":"testostrutturato/","text":"","title":"Index"},{"location":"utilities/","text":"Utility \u00b6 chardet \u00b6 tldr \u00b6","title":"Utility"},{"location":"utilities/#utility","text":"","title":"Utility"},{"location":"utilities/#chardet","text":"","title":"chardet"},{"location":"utilities/#tldr","text":"","title":"tldr"}]}